"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const http_1 = require("http");
const https_1 = require("https");
const os_1 = require("os");
const stdlib_1 = __importDefault(require("@doctormckay/stdlib"));
const url_1 = require("url");
const websocket_extensions_1 = __importDefault(require("websocket-extensions"));
const WebSocketBase_1 = __importDefault(require("./WebSocketBase"));
const State_1 = __importDefault(require("./enums/State"));
const WEBSOCKET_VERSION = 13;
// eslint-disable-next-line
const PACKAGE_VERSION = require('../package.json').version;
class WebSocket extends WebSocketBase_1.default {
    constructor(url, options) {
        super();
        let parsedUri = (0, url_1.parse)(url);
        switch (parsedUri.protocol.toLowerCase()) {
            case 'ws:':
                this.secure = false;
                break;
            case 'wss:':
                this.secure = true;
                break;
            default:
                throw new Error(`Unknown protocol scheme ${parsedUri.protocol}`);
        }
        options = options || {};
        Object.assign(this.options, options);
        let connectOptions = options.connection || {};
        for (let element in parsedUri) {
            if (parsedUri[element] !== null) {
                connectOptions[element] = parsedUri[element];
            }
        }
        connectOptions.protocol = this.secure ? 'https:' : 'http:';
        this.hostname = parsedUri.hostname;
        this.port = connectOptions.port = parseInt((parsedUri.port || (this.secure ? 443 : 80)).toString(), 10);
        this.path = parsedUri.path || '/';
        this._connectOptions = connectOptions;
        // clone the headers object so we don't unexpectedly modify the object that was passed in
        this.headers = JSON.parse(JSON.stringify(this.options.headers || {}));
        // Lowercase all the header names so we don't conflict (but only if they aren't already lowercase)
        for (let i in this.headers) {
            if (i.toLowerCase() != i) {
                this.headers[i.toLowerCase()] = this.headers[i];
                delete this.headers[i];
            }
        }
        this.headers.host = this.headers.host || parsedUri.host;
        this.headers.upgrade = 'websocket';
        this.headers.connection = 'Upgrade';
        this.headers['sec-websocket-version'] = WEBSOCKET_VERSION;
        this.headers['user-agent'] = this.headers['user-agent'] ||
            [
                `node.js/${process.versions.node} (${process.platform} ${(0, os_1.release)()} ${(0, os_1.arch)()})`,
                `node-websocket13/${PACKAGE_VERSION}`
            ].join(' ');
        // permessageDeflate defaults to true, so only if it's false should we disable it
        if (this.options.permessageDeflate === false) {
            this._extensions = new websocket_extensions_1.default();
        }
        let extOffer = this._extensions.generateOffer();
        if (extOffer) {
            this.headers['sec-websocket-extensions'] = extOffer;
        }
        if (this.options.protocols) {
            this.options.protocols = this.options.protocols.map(protocol => protocol.trim().toLowerCase());
            this.headers['sec-websocket-protocol'] = this.options.protocols.join(', ');
        }
        if (this.options.cookies) {
            this.headers.cookie = Object.keys(this.options.cookies).map(name => name.trim() + '=' + encodeURIComponent(this.options.cookies[name])).join('; ');
        }
        this._type = 'client';
        this._connect();
    }
    _generateNonce() {
        this._nonce = (0, crypto_1.randomBytes)(16).toString('base64');
        this.headers['sec-websocket-key'] = this._nonce;
    }
    _connect() {
        this._generateNonce();
        this.state = State_1.default.Connecting;
        if (this.options.handshakeBody) {
            this.headers['content-length'] = this.options.handshakeBody.length;
        }
        this._connectOptions.headers = this.headers;
        if (this.secure && this.headers.host && typeof this._connectOptions.servername == 'undefined') {
            this._connectOptions.servername = this.headers.host.split(':')[0];
        }
        if (this.options.httpProxy) {
            if (this._connectOptions.agent) {
                console.error('[websocket13] Warning: "agent" connection option specified; httpProxy option ignored');
            }
            else {
                this._connectOptions.agent = stdlib_1.default.HTTP.getProxyAgent(this.secure, this.options.httpProxy, this.options.proxyTimeout);
            }
        }
        let reqFunc = this.secure ? https_1.request : http_1.request;
        let req = reqFunc(this._connectOptions, (res) => {
            let serverHttpVersion = res.httpVersion;
            let responseCode = res.statusCode;
            let responseText = res.statusMessage;
            let err = new Error();
            err.responseCode = responseCode;
            err.responseText = responseText;
            err.httpVersion = serverHttpVersion;
            err.headers = res.headers;
            err.body = '';
            res.on('data', chunk => {
                err.body += chunk;
            });
            res.on('end', () => {
                if (this.state != State_1.default.Connecting) {
                    return; // we don't care at this point
                }
                if (responseCode != 101) {
                    err.message = `Response code ${responseCode}`;
                    this._closeError(err);
                    return;
                }
                err.message = 'Server not upgrading connection';
                this._closeError(err);
            });
        });
        req.on('upgrade', (res, socket, head) => {
            let serverHttpVersion = res.httpVersion;
            let responseCode = res.statusCode;
            let responseText = res.statusMessage;
            let headers = res.headers;
            let err = new Error();
            err.responseCode = responseCode;
            err.responseText = responseText;
            err.httpVersion = serverHttpVersion;
            err.headers = res.headers;
            if (!headers.upgrade || !headers.connection || !headers.upgrade.match(/websocket/i) || !headers.connection.match(/upgrade/i)) {
                err.message = 'Invalid server upgrade response';
                this._closeError(err);
                return;
            }
            if (!headers['sec-websocket-accept']) {
                err.message = 'Missing Sec-WebSocket-Accept response header';
                this._closeError(err);
                return;
            }
            let hash = (0, crypto_1.createHash)('sha1').update(this._nonce + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11').digest('base64');
            if (headers['sec-websocket-accept'] != hash) {
                err.message = 'Mismatching Sec-WebSocket-Accept header';
                err.expected = hash;
                err.actual = headers['sec-websocket-accept'];
                this._closeError(err);
                return;
            }
            if (this.state == State_1.default.Closing) {
                // we wanted to abort this connection
                this.emit('debug', 'Closing newly-established connection due to abort');
                socket.end();
                socket.destroy();
                return;
            }
            if (headers['sec-websocket-protocol']) {
                let protocol = headers['sec-websocket-protocol'].toLowerCase();
                if (this.options.protocols.indexOf(protocol) == -1) {
                    err.message = `Server is using unsupported protocol ${protocol}`;
                    this._closeError(err);
                    return;
                }
                this.protocol = protocol;
            }
            try {
                this._extensions.activate(headers['sec-websocket-extensions']);
            }
            catch (ex) {
                err.message = ex.message;
                this._closeError(err);
                return;
            }
            this._socket = socket;
            this._prepSocketEvents();
            this._resetUserTimeout();
            // Everything is okay!
            this.state = State_1.default.Connected;
            let connectEventArgs = {
                headers: headers,
                httpVersion: serverHttpVersion,
                responseCode,
                responseText
            };
            this.emit('connected', connectEventArgs);
            this.emit('connect', connectEventArgs); // save people from typos
            this._onConnected();
            if (head && head.length > 0) {
                this._handleData(head);
            }
        });
        req.on('error', (err) => {
            if (this.state != State_1.default.Connecting) {
                return;
            }
            err.state = this.state;
            this.emit('error', err);
        });
        req.end(this.options.handshakeBody);
    }
    _sendFrame(frame, bypassQueue = false) {
        frame.maskKey = (0, crypto_1.randomBytes)(4).readUInt32BE(0);
        super._sendFrame(frame, bypassQueue);
    }
}
exports.default = WebSocket;
//# sourceMappingURL=data:application/json;base64,
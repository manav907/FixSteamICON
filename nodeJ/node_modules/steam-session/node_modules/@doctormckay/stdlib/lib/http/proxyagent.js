"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
const https_1 = require("https");
const tls_1 = require("tls");
/**
 * Get an Agent that connects through a proxy.
 * @param {boolean} secure - Will the connection to the destination server be secure? NOT the connection to the proxy.
 * @param {string|null} proxyUrl - The URL of the proxy, including the protocol, auth (if applicable), host, and port
 * @param {int} [proxyTimeout=5000] - Timeout for connecting to the proxy, in milliseconds
 * @returns {HttpAgent|HttpsAgent|boolean}
 */
function getProxyAgent(secure, proxyUrl, proxyTimeout = 5000) {
    if (!proxyUrl) {
        return false; // no need to use an agent
    }
    let agent = new (secure ? https_1.Agent : http_1.Agent)({ keepAlive: false });
    // @ts-ignore
    agent.createConnection = function (options, callback) {
        let url = new URL(proxyUrl);
        let prox = {
            protocol: url.protocol,
            host: url.hostname,
            port: url.port
        };
        prox.method = 'CONNECT';
        prox.path = options.host + ':' + options.port; // the host where we want the proxy to connect
        prox.localAddress = options.localAddress;
        if (url.username) {
            prox.headers = {
                'Proxy-Authorization': `Basic ${(Buffer.from(`${url.username}:${url.password || ''}`, 'utf8')).toString('base64')}`
            };
        }
        // Make the CONNECT request
        let finished = false;
        let didWeEverConnect = false;
        let req = (prox.protocol == 'https:' ? https_1.request : http_1.request)(prox);
        req.end();
        req.setTimeout(proxyTimeout);
        req.on('connect', (res, socket) => {
            didWeEverConnect = true;
            if (finished) {
                // This has already errored
                socket.end();
                return;
            }
            finished = true;
            req.setTimeout(0);
            if (res.statusCode != 200) {
                callback(new Error(`Proxy CONNECT ${res.statusCode} ${res.statusMessage}`));
                return;
            }
            if (!secure) {
                // The connection to the destination server won't be secure, so we're done here
                callback(null, socket);
                return;
            }
            let tlsOptions = { socket };
            for (let i in options) {
                if (i.match(/^_/) || ['agent', 'headers'].includes(i)) {
                    // Ignore private properties, and "agent" and "headers"
                    continue;
                }
                tlsOptions[i] = options[i];
            }
            // The connection to the destination server needs to be secure, so do the TLS handshake with the destination
            let tlsSocket = (0, tls_1.connect)(tlsOptions, () => {
                tlsSocket.removeListener('error', onTlsError); // we don't want to intercept errors later on
                if (!tlsSocket.authorized && tlsOptions.rejectUnauthorized !== false && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0') {
                    // Checking this isn't strictly necessary as all versions of Node since 2013 won't call this callback in this case
                    // (or perhaps all versions of node ever that have TLSSocket?)
                    callback(tlsSocket.authorizationError || new Error('Secure connection failed'));
                    return;
                }
                // All good!
                callback(null, tlsSocket);
            });
            tlsSocket.on('error', onTlsError);
            function onTlsError(err) {
                // TLS handshake error
                socket.end();
                err.proxyConnecting = !didWeEverConnect;
                callback(err);
            }
        });
        req.on('timeout', () => {
            if (finished) {
                return;
            }
            finished = true;
            let err = new Error('Proxy connection timed out');
            err.proxyConnecting = !didWeEverConnect;
            callback(err);
        });
        req.on('error', (err) => {
            if (finished) {
                return;
            }
            finished = true;
            err.proxyConnecting = !didWeEverConnect;
            callback(err);
        });
    };
    return agent;
}
exports.default = getProxyAgent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHlhZ2VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvaHR0cC9wcm94eWFnZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXNHO0FBQ3RHLGlDQUFtRTtBQUNuRSw2QkFBZ0c7QUFFaEc7Ozs7OztHQU1HO0FBQ0gsU0FBd0IsYUFBYSxDQUFDLE1BQWUsRUFBRSxRQUFnQixFQUFFLFlBQVksR0FBRyxJQUFJO0lBQzNGLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDZCxPQUFPLEtBQUssQ0FBQyxDQUFDLDBCQUEwQjtLQUN4QztJQUVELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGFBQVUsQ0FBQyxDQUFDLENBQUMsWUFBUyxDQUFDLENBQUMsRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUN0RSxhQUFhO0lBQ2IsS0FBSyxDQUFDLGdCQUFnQixHQUFHLFVBQVMsT0FBTyxFQUFFLFFBQVE7UUFDbEQsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsSUFBSSxJQUFJLEdBQXNCO1lBQzdCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtZQUN0QixJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVE7WUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1NBQ2QsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLDhDQUE4QztRQUM3RixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDekMsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUc7Z0JBQ2QscUJBQXFCLEVBQUUsU0FB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
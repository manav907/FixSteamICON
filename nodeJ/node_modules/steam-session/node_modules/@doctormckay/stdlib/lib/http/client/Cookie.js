"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const psl_1 = require("psl");
class Cookie {
    constructor(options) {
        this.name = options.name;
        this.content = options.content;
        this.domain = options.domain;
        this.expires = options.expires;
        this.path = options.path;
        this.secure = options.secure;
    }
    static parse(setCookie, domain) {
        let parts = setCookie.split(';').map(p => p.trim());
        let nameAndValue = parseEqSeparated(parts.splice(0, 1)[0]);
        if (!nameAndValue) {
            return null;
        }
        let [name, content] = nameAndValue;
        let expires = null;
        let path = '/';
        let secure = false;
        if (content.startsWith('"') && content.endsWith('"')) {
            content = content.replace(/(^"|"$)/g, '');
        }
        domain = domain.toLowerCase();
        parts.forEach((attr) => {
            let splitAttr = parseEqSeparated(attr);
            if (!splitAttr) {
                if (attr.trim().toLowerCase() == 'secure') {
                    secure = true;
                }
                return;
            }
            let [attrName, attrValue] = splitAttr;
            switch (attrName.toLowerCase()) {
                case 'domain':
                    if (domain == '__jarimport__') {
                        // we're importing a saved jar, always trust this domain
                        domain = attrValue;
                        break;
                    }
                    attrValue = trimDots(attrValue).toLowerCase();
                    // Cookies can only be set to a specific domain if they aren't a public suffix (checked by isValid),
                    // and if the domain attribute is a subdomain of the request domain.
                    if ((0, psl_1.isValid)(attrValue) && domain.includes(attrValue)) {
                        // Leading dot indicates internally that we send this to subdomains. If no Domain attribute is
                        // provided, then the cookie is not sent to subdomains
                        domain = `.${attrValue}`;
                    }
                    break;
                case 'expires':
                    let date = new Date(attrValue);
                    if (date.toString() != 'Invalid Date') {
                        expires = date;
                    }
                    break;
                case 'path':
                    path = attrValue;
                    break;
            }
        });
        return new Cookie({
            name,
            content,
            domain,
            expires,
            path,
            secure
        });
    }
    stringify() {
        let output = `${this.name}=${this.content}`;
        let attributes = {
            Domain: this.domain,
            Path: this.path
        };
        if (this.expires) {
            attributes.Expires = this.expires.toUTCString();
        }
        attributes = Object.keys(attributes).map(attrName => `${attrName}=${attributes[attrName]}`).join('; ');
        if (this.secure) {
            attributes += '; Secure';
        }
        return `${output}; ${attributes}`;
    }
    shouldSendForRequest(domain, path, secure) {
        if (this.expires && this.expires.getTime() < Date.now()) {
            return false;
        }
        if (this.secure && !secure) {
            return false;
        }
        if (!path.startsWith(this.path)) {
            return false;
        }
        if (this.domain[0] != '.' && domain.toLowerCase() != this.domain) {
            // must be exact domain match
            return false;
        }
        // subdomain match
        if (!domain.toLowerCase().endsWith(this.domain.substring(1))) {
            return false;
        }
        return true;
    }
}
exports.default = Cookie;
function parseEqSeparated(value) {
    let eqIdx = value.trim().indexOf('=');
    if (eqIdx == -1) {
        return null;
    }
    let name = value.slice(0, eqIdx).trim();
    let content = value.slice(eqIdx + 1).trim();
    return [name, content];
}
function trimDots(value) {
    return value.replace(/(^\.|\.$)/g, '');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29va2llLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9odHRwL2NsaWVudC9Db29raWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNEI7QUFXNUIsTUFBcUIsTUFBTTtJQVExQixZQUFZLE9BQXNCO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQWlCLEVBQUUsTUFBYztRQUM3QyxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELElBQUksWUFBWSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQztTQUNaO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxZQUFZLENBQUM7UUFDbkMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksTUFBTSxHQUFHLEtB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
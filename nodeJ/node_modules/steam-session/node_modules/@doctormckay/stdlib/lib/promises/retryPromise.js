"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a promise that will call the executor again on error, up to the specified number of attempts.
 * @param {int} attempts
 * @param {int} [delayBetweenAttempts] - Delay in milliseconds between executor failure and subsequent re-attempt
 * @param {function} executor
 * @returns {Promise}
 */
function retryPromise(attempts, delayBetweenAttempts, executor) {
    if (typeof delayBetweenAttempts == 'function') {
        executor = delayBetweenAttempts;
        delayBetweenAttempts = 0;
    }
    return new Promise((resolve, reject) => {
        try {
            let executorReturn = executor((resolveValue) => {
                // resolve() was called inside the executor
                resolve(resolveValue);
            }, handleRejection);
            if (typeof executorReturn == 'object' && executorReturn !== null && typeof executorReturn.catch == 'function') {
                // It's an async function
                // The executor is an async function and it was rejected (e.g. new Promise(async (resolve, reject) => { }))
                executorReturn.catch(handleRejection);
            }
        }
        catch (ex) {
            // The executor is not an async function, and something threw inside of it
            handleRejection(ex);
        }
        function handleRejection(value) {
            console.log('handling rejection');
            if (attempts <= 1) {
                return reject(value); // fatal failure
            }
            setTimeout(() => {
                let innerPromise = retryPromise(attempts - 1, delayBetweenAttempts, executor);
                innerPromise.then(resolve, reject);
            }, delayBetweenAttempts);
        }
    });
}
exports.default = retryPromise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnlQcm9taXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9wcm9taXNlcy9yZXRyeVByb21pc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0dBTUc7QUFDSCxTQUF3QixZQUFZLENBQ25DLFFBQWdCLEVBQ2hCLG9CQUE0QixFQUM1QixRQUdRO0lBRVIsSUFBSSxPQUFPLG9CQUFvQixJQUFJLFVBQVUsRUFBRTtRQUM5QyxRQUFRLEdBQUcsb0JBQW9CLENBQUM7UUFDaEMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO0tBQ3pCO0lBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUN0QyxJQUFJO1lBQ0gsSUFBSSxjQUFjLEdBQUcsUUFBUSxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQzlDLDJDQUEyQztnQkFDM0MsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztZQUVwQixJQUFJLE9BQU8sY0FBYyxJQUFJLFFBQVEsSUFBSSxjQUFjLEtBQUssSUFBSSxJQUFJLE9BQU8sY0FBYyxDQUFDLEtBQUssSUFBSSxVQUFVLEVBQUU7Z0JBQzlHLHlCQUF5QjtnQkFDekIsMkdBQTJHO2dCQUMzRyxjQUFjLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Q7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNaLDBFQUEwRTtZQUMxRSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDcEI7UUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUFLO1lBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNsQyxJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xCLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCO2FBQ3RDO1lBRUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZixJQUFJLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDOUUsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDcEMsQ0FBQyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDMUIsQ0FBQztJQUNGLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQTFDRCwrQkEwQ0MifQ==
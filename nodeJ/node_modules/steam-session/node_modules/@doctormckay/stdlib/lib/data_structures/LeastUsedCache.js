"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LeastUsedCache_entries, _LeastUsedCache_lastAccess, _LeastUsedCache_maxItems, _LeastUsedCache_gcInterval, _LeastUsedCache_lastGc;
Object.defineProperty(exports, "__esModule", { value: true });
class LeastUsedCache {
    /**
     * Construct a new LeastUsedCache.
     * @param {int} maxItems - Maximum number of items allowed in the cache before stuff will start being pruned
     * @param {int} gcInterval - Time in milliseconds between garbage collections
     * @constructor
     */
    constructor(maxItems, gcInterval) {
        _LeastUsedCache_entries.set(this, void 0);
        _LeastUsedCache_lastAccess.set(this, void 0);
        _LeastUsedCache_maxItems.set(this, void 0);
        _LeastUsedCache_gcInterval.set(this, void 0);
        _LeastUsedCache_lastGc.set(this, void 0);
        __classPrivateFieldSet(this, _LeastUsedCache_entries, {}, "f");
        __classPrivateFieldSet(this, _LeastUsedCache_lastAccess, {}, "f");
        __classPrivateFieldSet(this, _LeastUsedCache_maxItems, maxItems, "f");
        __classPrivateFieldSet(this, _LeastUsedCache_gcInterval, gcInterval, "f");
        __classPrivateFieldSet(this, _LeastUsedCache_lastGc, Date.now(), "f");
    }
    /**
     * Add an entry to the cache.
     * @param {string} key - The key under which this entry should be stored
     * @param {*} val - The value to store in this entry
     */
    add(key, val) {
        __classPrivateFieldGet(this, _LeastUsedCache_entries, "f")[key] = val;
        __classPrivateFieldGet(this, _LeastUsedCache_lastAccess, "f")[key] = Date.now();
        this.checkGC();
    }
    /**
     * Get the entry stored in the cache under a particular key.
     * @param {string} key - The key to retrieve
     * @return {null|*} value if present, null if not
     */
    get(key) {
        if (typeof __classPrivateFieldGet(this, _LeastUsedCache_entries, "f")[key] != 'undefined') {
            __classPrivateFieldGet(this, _LeastUsedCache_lastAccess, "f")[key] = Date.now();
            this.checkGC();
            return __classPrivateFieldGet(this, _LeastUsedCache_entries, "f")[key];
        }
        else {
            return null;
        }
    }
    /**
     * Delete an entry from the cache.
     * @param {string} key
     */
    delete(key) {
        delete __classPrivateFieldGet(this, _LeastUsedCache_entries, "f")[key];
        delete __classPrivateFieldGet(this, _LeastUsedCache_lastAccess, "f")[key];
        this.checkGC();
    }
    /**
     * Get a list of all keys in the cache.
     * @returns {string[]}
     */
    getKeys() {
        this.checkGC();
        return Object.keys(__classPrivateFieldGet(this, _LeastUsedCache_entries, "f"));
    }
    /**
     * Check if a garbage collection is necessary and if so, do it.
     */
    checkGC() {
        if (Date.now() - __classPrivateFieldGet(this, _LeastUsedCache_lastGc, "f") >= __classPrivateFieldGet(this, _LeastUsedCache_gcInterval, "f")) {
            this.gc();
        }
    }
    /**
     * Collect garbage and delete anything over the limit that hasn't been accessed in a while.
     */
    gc() {
        __classPrivateFieldSet(this, _LeastUsedCache_lastGc, Date.now(), "f");
        let keys = this.getKeys();
        if (keys.length <= __classPrivateFieldGet(this, _LeastUsedCache_maxItems, "f")) {
            return; // we aren't over the limit, so nothing to do
        }
        // sort the keys so that the least-frequently-accessed ones are at the end
        keys.sort((a, b) => __classPrivateFieldGet(this, _LeastUsedCache_lastAccess, "f")[a] > __classPrivateFieldGet(this, _LeastUsedCache_lastAccess, "f")[b] ? -1 : 1);
        keys.slice(keys.length - (keys.length - __classPrivateFieldGet(this, _LeastUsedCache_maxItems, "f"))).forEach((key) => {
            this.delete(key);
        });
    }
}
exports.default = LeastUsedCache;
_LeastUsedCache_entries = new WeakMap(), _LeastUsedCache_lastAccess = new WeakMap(), _LeastUsedCache_maxItems = new WeakMap(), _LeastUsedCache_gcInterval = new WeakMap(), _LeastUsedCache_lastGc = new WeakMap();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVhc3RVc2VkQ2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL2RhdGFfc3RydWN0dXJlcy9MZWFzdFVzZWRDYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLE1BQXFCLGNBQWM7SUFPbEM7Ozs7O09BS0c7SUFDSCxZQUFZLFFBQWdCLEVBQUUsVUFBa0I7UUFaaEQsMENBQWdDO1FBQ2hDLDZDQUFzQztRQUN0QywyQ0FBa0I7UUFDbEIsNkNBQW9CO1FBQ3BCLHlDQUFnQjtRQVNmLHVCQUFBLElBQUksMkJBQVksRUFBRSxNQUFBLENBQUM7UUFDbkIsdUJBQUEsSUFBSSw4QkFBZSxFQUFFLE1BQUEsQ0FBQztRQUN0Qix1QkFBQSxJQUFJLDRCQUFhLFFBQVEsTUFBQSxDQUFDO1FBQzFCLHVCQUFBLElBQUksOEJBQWUsVUFBVSxNQUFBLENBQUM7UUFDOUIsdUJBQUEsSUFBSSwwQkFBVyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQUEsQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBUTtRQUN4Qix1QkFBQSxJQUFJLCtCQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLHVCQUFBLElBQUksa0NBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsR0FBRyxDQUFDLEdBQVc7UUFDZCxJQUFJLE9BQU8sdUJBQUEsSUFBSSwrQkFBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFdBQVcsRUFBRTtZQUM3Qyx1QkFBQSxJQUFJLGtDQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNmLE9BQU8sdUJBQUEsSUFBSSwrQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO2FBQU07WUFDTixPQUFPLElBQUksQ0FBQztTQUNaO0lBQ0YsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxHQUFXO1FBQ2pCLE9BQU8sdUJBQUEsSUFBSSwrQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sdUJBQUEsSUFBSSxrQ0FBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsT0FBTztRQUNOLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBQSxJQUFJLCtCQUFTLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPO1FBQ04sSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsdUJBQUEsSUFBSSw4QkFBUSxJQUFJLHVCQUFBLElBQUksa0NBQVksRUFBRTtZQUNsRCxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDVjtJQUNGLENBQUM7SUFFRDs7T0FFRztJQUNILEVBQUU7UUFDRCx1QkFBQSxJQUFJLDBCQUFXLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBQSxDQUFDO1FBRTFCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksdUJBQUEsSUFBSSxnQ0FBVSxFQUFFO1lBQ2xDLE9BQU8sQ0FBQyw2Q0FBNkM7U0FDckQ7UUFFRCwwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLHVCQUFBLElBQUksa0NBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyx1QkFBQSxJQUFJLGtDQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLHVCQUFBLElBQUksZ0NBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDeEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRDtBQTVGRCxpQ0E0RkMifQ==
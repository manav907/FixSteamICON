"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Queue_length, _Queue_tail, _Queue_head;
Object.defineProperty(exports, "__esModule", { value: true });
class Queue {
    /**
     * Create a new Queue. A Queue is a FIFO data structure, in which all you can do is append items and remove items from
     * the front. Under the hood, this is implemented with a doubly-linked list (DLL).
     * @constructor
     */
    constructor() {
        _Queue_length.set(this, void 0);
        _Queue_tail.set(this, void 0);
        _Queue_head.set(this, void 0);
        __classPrivateFieldSet(this, _Queue_length, 0, "f");
        __classPrivateFieldSet(this, _Queue_head, null, "f");
        __classPrivateFieldSet(this, _Queue_tail, null, "f");
    }
    get length() {
        return __classPrivateFieldGet(this, _Queue_length, "f");
    }
    /**
     * Push a new item to the end of the queue.
     * @param {*} item - The item to push into the queue
     * @return {int} The new length of the queue
     */
    enqueue(item) {
        var _a;
        // Create the DLL node. The "next" pointer is empty and the "prev" pointer is the existing tail of the list.
        let entry = { data: item, next: null, prev: __classPrivateFieldGet(this, _Queue_tail, "f") };
        if (__classPrivateFieldGet(this, _Queue_tail, "f")) {
            // If we already have a tail, make its next pointer point to this node.
            __classPrivateFieldGet(this, _Queue_tail, "f").next = entry;
        }
        if (!__classPrivateFieldGet(this, _Queue_head, "f")) {
            // If the list was empty, this is also the new head
            __classPrivateFieldSet(this, _Queue_head, entry, "f");
        }
        // This node is now our new tail
        __classPrivateFieldSet(this, _Queue_tail, entry, "f");
        return __classPrivateFieldSet(this, _Queue_length, (_a = __classPrivateFieldGet(this, _Queue_length, "f"), ++_a), "f");
    }
    push(item) {
        return this.enqueue(item);
    }
    /**
     * Inserts a new item into the front of the queue.
     * @param {*} item - The item to insert into the queue
     * @return {int} The new length of the queue
     */
    insert(item) {
        var _a;
        let entry = { data: item, next: __classPrivateFieldGet(this, _Queue_head, "f"), prev: null };
        __classPrivateFieldSet(this, _Queue_head, entry, "f");
        // If we didn't previously have a tail, make this the tail as well
        if (!__classPrivateFieldGet(this, _Queue_tail, "f")) {
            __classPrivateFieldSet(this, _Queue_tail, entry, "f");
        }
        return __classPrivateFieldSet(this, _Queue_length, (_a = __classPrivateFieldGet(this, _Queue_length, "f"), ++_a), "f");
    }
    /**
     * Remove the first element from the queue and return it.
     * @return {*} The first item in the queue. Null if the queue is empty.
     */
    dequeue() {
        var _a;
        if (!__classPrivateFieldGet(this, _Queue_head, "f")) {
            return null;
        }
        let entry = __classPrivateFieldGet(this, _Queue_head, "f").data;
        // remove it from the list
        __classPrivateFieldSet(this, _Queue_head, __classPrivateFieldGet(this, _Queue_head, "f").next, "f");
        if (!__classPrivateFieldGet(this, _Queue_head, "f")) {
            // the list is now empty
            __classPrivateFieldSet(this, _Queue_tail, null, "f");
        }
        __classPrivateFieldSet(this, _Queue_length, (_a = __classPrivateFieldGet(this, _Queue_length, "f"), _a--, _a), "f");
        return entry;
    }
    pop() {
        return this.dequeue();
    }
    /**
     * Empty this queue by removing all items in it.
     */
    empty() {
        __classPrivateFieldSet(this, _Queue_head, null, "f");
        __classPrivateFieldSet(this, _Queue_tail, null, "f");
        __classPrivateFieldSet(this, _Queue_length, 0, "f");
    }
}
exports.default = Queue;
_Queue_length = new WeakMap(), _Queue_tail = new WeakMap(), _Queue_head = new WeakMap();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL2RhdGFfc3RydWN0dXJlcy9RdWV1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQU1BLE1BQXFCLEtBQUs7SUFLekI7Ozs7T0FJRztJQUNIO1FBVEEsZ0NBQWdCO1FBQ2hCLDhCQUFrQjtRQUNsQiw4QkFBa0I7UUFRakIsdUJBQUEsSUFBSSxpQkFBVyxDQUFDLE1BQUEsQ0FBQztRQUNqQix1QkFBQSxJQUFJLGVBQVMsSUFBSSxNQUFBLENBQUM7UUFDbEIsdUJBQUEsSUFBSSxlQUFTLElBQUksTUFBQSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDVCxPQUFPLHVCQUFBLElBQUkscUJBQVEsQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE9BQU8sQ0FBQyxJQUFTOztRQUNoQiw0R0FBNEc7UUFDNUcsSUFBSSxLQUFLLEdBQWEsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLHVCQUFBLElBQUksbUJBQU0sRUFBQyxDQUFDO1FBRWpFLElBQUksdUJBQUEsSUFBSSxtQkFBTSxFQUFFO1lBQ2YsdUVBQXVFO1lBQ3ZFLHVCQUFBLElBQUksbUJBQU0sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO1FBRUQsSUFBSSxDQUFDLHVCQUFBLElBQUksbUJBQU0sRUFBRTtZQUNoQixtREFBbUQ7WUFDbkQsdUJBQUEsSUFBSSxlQUFTLEtBQUssTUFBQSxDQUFDO1NBQ25CO1FBRUQsZ0NBQWdDO1FBQ2hDLHVCQUFBLElBQUksZUFBUyxLQUFLLE1BQUEsQ0FBQztRQUNuQixPQUFPLDRDQUFBLENBQUUscURBQVksRUFBZCxJQUFjLENBQUEsTUFBQSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBUztRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxJQUFTOztRQUNmLElBQUksS0FBSyxHQUFhLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsdUJBQUEsSUFBSSxtQkFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztRQUNqRSx1QkFBQSxJQUFJLGVBQVMsS0FBSyxNQUFBLENBQUM7UUFFbkIsa0VBQWtFO1FBQ2xFLElBQUksQ0FBQyx1QkFBQSxJQUFJLG1CQUFNLEVBQUU7WUFDaEIsdUJBQUEsSUFBSSxlQUFTLEtBQUssTUFBQSxDQUFDO1NBQ25CO1FBRUQsT0FBTyw0Q0FBQSxDQUFFLHFEQUFZLEVBQWQsSUFBYyxDQUFBLE1BQUEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsT0FBTzs7UUFDTixJQUFJLENBQUMsdUJBQUEsSUFBSSxtQkFBTSxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFJLEtBQUssR0FBRyx1QkFBQSxJQUFJLG1CQUFNLENBQUMsSUFBSSxDQUFDO1FBQzVCLDBCQUEwQjtRQUMxQix1QkFBQSxJQUFJLGVBQVMsdUJBQUEsSUFBSSxtQkFBTSxDQUFDLElBQUksTUFBQSxDQUFDO1FBQzdCLElBQUksQ0FBQyx1QkFBQSxJQUFJLG1CQUFNLEVBQUU7WUFDaEIsd0JBQXdCO1lBQ3hCLHVCQUFBLElBQUksZUFBUyxJQUFJLE1BQUEsQ0FBQztTQUNsQjtRQUVELDRDQUFBLENBQUEscURBQVksRUFBWixJQUFjLElBQUEsQ0FBQSxNQUFBLENBQUM7UUFDZixPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxHQUFHO1FBQ0YsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNKLHVCQUFBLElBQUksZUFBUyxJQUFJLE1BQUEsQ0FBQztRQUNsQix1QkFBQSxJQUFJLGVBQVMsSUFBSSxNQUFBLENBQUM7UUFDbEIsdUJBQUEsSUFBSSxpQkFBVyxDQUFDLE1BQUEsQ0FBQztJQUNsQixDQUFDO0NBQ0Q7QUFsR0Qsd0JBa0dDIn0=
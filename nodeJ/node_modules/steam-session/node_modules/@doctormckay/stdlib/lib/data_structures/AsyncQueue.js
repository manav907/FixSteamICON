"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _AsyncQueue_instances, _AsyncQueue_running, _AsyncQueue_paused, _AsyncQueue_killed, _AsyncQueue_queue, _AsyncQueue_process;
Object.defineProperty(exports, "__esModule", { value: true });
const Queue_1 = __importDefault(require("./Queue"));
class AsyncQueue {
    /**
     * Construct a new AsyncQueue. An AsyncQueue is a traditional FIFO queue, but it's designed for asynchronous tasks.
     * @param {function} worker - A worker function that takes two arguments, (element, callback) to be invoked when processing an item
     * @param {int} [concurrency=1] - The maximum number of workers that may be working at once
     * @constructor
     */
    constructor(worker, concurrency = 1) {
        _AsyncQueue_instances.add(this);
        _AsyncQueue_running.set(this, void 0);
        _AsyncQueue_paused.set(this, void 0);
        _AsyncQueue_killed.set(this, void 0);
        _AsyncQueue_queue.set(this, void 0);
        this.concurrency = concurrency;
        this.worker = worker;
        __classPrivateFieldSet(this, _AsyncQueue_running, 0, "f");
        __classPrivateFieldSet(this, _AsyncQueue_paused, false, "f");
        __classPrivateFieldSet(this, _AsyncQueue_killed, false, "f");
        __classPrivateFieldSet(this, _AsyncQueue_queue, new Queue_1.default(), "f");
    }
    get running() {
        return __classPrivateFieldGet(this, _AsyncQueue_running, "f");
    }
    get paused() {
        return __classPrivateFieldGet(this, _AsyncQueue_paused, "f");
    }
    get killed() {
        return __classPrivateFieldGet(this, _AsyncQueue_killed, "f");
    }
    get length() {
        return __classPrivateFieldGet(this, _AsyncQueue_queue, "f").length;
    }
    /**
     * Pause execution and stop handing items to workers.
     */
    pause() {
        __classPrivateFieldSet(this, _AsyncQueue_paused, true, "f");
    }
    /**
     * Unpause execution and start workers on items in the queue again.
     */
    resume() {
        __classPrivateFieldSet(this, _AsyncQueue_paused, false, "f");
        __classPrivateFieldGet(this, _AsyncQueue_instances, "m", _AsyncQueue_process).call(this);
    }
    /**
     * Destroy this queue and stop processing items. Anything currently processing will finish and emit callbacks.
     */
    kill() {
        this.drain = null;
        this.empty = null;
        __classPrivateFieldSet(this, _AsyncQueue_killed, true, "f");
        __classPrivateFieldGet(this, _AsyncQueue_queue, "f").empty();
    }
    /**
     * Push a new item to the end of the queue.
     * @param {*} item - The item to push into the queue
     * @param {function} [callback] - A callback to be invoked after this item is finished processing, which takes arguments (err, result)
     * @return {int} The new length of the queue
     */
    enqueue(item, callback) {
        if (this.killed) {
            throw new Error('Cannot push items into a killed AsyncQueue');
        }
        let workItem = { data: item, callback };
        __classPrivateFieldGet(this, _AsyncQueue_queue, "f").push(workItem);
        process.nextTick(() => __classPrivateFieldGet(this, _AsyncQueue_instances, "m", _AsyncQueue_process).call(this));
        return this.length;
    }
    /**
     * Push a new item to the end of the queue.
     * @param {*} item - The item to push into the queue
     * @param {function} [callback] - A callback to be invoked after this item is finished processing, which takes arguments (err, result)
     * @return {int} The new length of the queue
     */
    push(item, callback) {
        return this.enqueue(item, callback);
    }
    /**
     * Insert a new item into the front of the queue.
     * @param {*} item - The item to push into the queue
     * @param {function} [callback] - A callback to be invoked after this item is finished processing, which takes arguments (err, result)
     * @return {int} The new length of the queue
     */
    insert(item, callback) {
        if (this.killed) {
            throw new Error('Cannot insert items into a killed AsyncQueue');
        }
        __classPrivateFieldGet(this, _AsyncQueue_queue, "f").insert({ data: item, callback });
        process.nextTick(() => __classPrivateFieldGet(this, _AsyncQueue_instances, "m", _AsyncQueue_process).call(this));
        return this.length;
    }
}
exports.default = AsyncQueue;
_AsyncQueue_running = new WeakMap(), _AsyncQueue_paused = new WeakMap(), _AsyncQueue_killed = new WeakMap(), _AsyncQueue_queue = new WeakMap(), _AsyncQueue_instances = new WeakSet(), _AsyncQueue_process = function _AsyncQueue_process() {
    var _a;
    if (this.killed || this.paused || this.length == 0 || this.running >= this.concurrency) {
        // execution is killed/paused, there's nothing in the queue, or we already have too many running workers
        return;
    }
    // we don't have too many running workers
    let item = __classPrivateFieldGet(this, _AsyncQueue_queue, "f").pop();
    if (__classPrivateFieldGet(this, _AsyncQueue_queue, "f").length == 0 && this.empty) {
        // there is now nothing left in the queue (but we're still processing stuff)
        this.empty();
    }
    this.start && this.start(item);
    __classPrivateFieldSet(this, _AsyncQueue_running, (_a = __classPrivateFieldGet(this, _AsyncQueue_running, "f"), _a++, _a), "f");
    this.worker(item.data, (err, ...args) => {
        var _a;
        if (err) {
            this.error && this.error(err, item.data);
            item.callback && item.callback.apply(this, [err, ...args]);
        }
        else {
            item.callback && item.callback.apply(this, [null, ...args]);
        }
        if (__classPrivateFieldSet(this, _AsyncQueue_running, (_a = __classPrivateFieldGet(this, _AsyncQueue_running, "f"), --_a), "f") == 0 && this.length == 0) {
            this.drain && this.drain();
        }
        __classPrivateFieldGet(this, _AsyncQueue_instances, "m", _AsyncQueue_process).call(this);
    });
    __classPrivateFieldGet(this, _AsyncQueue_instances, "m", _AsyncQueue_process).call(this);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXN5bmNRdWV1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZGF0YV9zdHJ1Y3R1cmVzL0FzeW5jUXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvREFBNEI7QUFPNUIsTUFBcUIsVUFBVTtJQWE5Qjs7Ozs7T0FLRztJQUNILFlBQVksTUFBTSxFQUFFLFdBQVcsR0FBRyxDQUFDOztRQVhuQyxzQ0FBaUI7UUFDakIscUNBQWlCO1FBQ2pCLHFDQUFpQjtRQUNqQixvQ0FBYztRQVNiLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLHVCQUFBLElBQUksdUJBQVksQ0FBQyxNQUFBLENBQUM7UUFDbEIsdUJBQUEsSUFBSSxzQkFBVyxLQUFLLE1BQUEsQ0FBQztRQUNyQix1QkFBQSxJQUFJLHNCQUFXLEtBQUssTUFBQSxDQUFDO1FBQ3JCLHVCQUFBLElBQUkscUJBQVUsSUFBSSxlQUFLLEVBQUUsTUFBQSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVixPQUFPLHVCQUFBLElBQUksMkJBQVMsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1QsT0FBTyx1QkFBQSxJQUFJLDBCQUFRLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNULE9BQU8sdUJBQUEsSUFBSSwwQkFBUSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDVCxPQUFPLHVCQUFBLElBQUkseUJBQU8sQ0FBQyxNQUFNLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNKLHVCQUFBLElBQUksc0JBQVcsSUFBSSxNQUFBLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNMLHVCQUFBLElBQUksc0JBQVcsS0FBSyxNQUFBLENBQUM7UUFDckIs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
/// <reference types="node" />
/// <reference types="node" />
import { HttpClient } from '@doctormckay/stdlib/http';
import { EventEmitter } from 'events';
import EAuthTokenPlatformType from './enums-steam/EAuthTokenPlatformType';
import ITransport from './transports/ITransport';
import { CAuthentication_GetPasswordRSAPublicKey_Response } from './protobuf-generated/types';
import { AuthenticationClientConstructorOptions, CheckMachineAuthRequest, CheckMachineAuthResponse, GetAuthSessionInfoRequest, GetAuthSessionInfoResponse, MobileConfirmationRequest, PlatformData, PollLoginStatusRequest, PollLoginStatusResponse, StartAuthSessionWithCredentialsRequest, StartAuthSessionWithCredentialsResponse, StartAuthSessionWithQrResponse, SubmitSteamGuardCodeRequest } from './interfaces-internal';
interface RequestDefinition {
    apiInterface: string;
    apiMethod: string;
    apiVersion: number;
    data: any;
    accessToken?: string;
}
export default class AuthenticationClient extends EventEmitter {
    _transport: ITransport;
    _platformType: EAuthTokenPlatformType;
    _webClient: HttpClient;
    _transportCloseTimeout: NodeJS.Timeout;
    _webUserAgent: string;
    _machineId?: Buffer | boolean;
    constructor(options: AuthenticationClientConstructorOptions);
    getRsaKey(accountName: string): Promise<CAuthentication_GetPasswordRSAPublicKey_Response>;
    encryptPassword(accountName: string, password: string): Promise<{
        encryptedPassword: string;
        keyTimestamp: string;
    }>;
    startSessionWithCredentials(details: StartAuthSessionWithCredentialsRequest): Promise<StartAuthSessionWithCredentialsResponse>;
    startSessionWithQR(): Promise<StartAuthSessionWithQrResponse>;
    submitSteamGuardCode(details: SubmitSteamGuardCodeRequest): Promise<void>;
    checkMachineAuthOrSendCodeEmail(details: CheckMachineAuthRequest): Promise<CheckMachineAuthResponse>;
    pollLoginStatus(details: PollLoginStatusRequest): Promise<PollLoginStatusResponse>;
    getAuthSessionInfo(accessToken: string, details: GetAuthSessionInfoRequest): Promise<GetAuthSessionInfoResponse>;
    submitMobileConfirmation(accessToken: string, details: MobileConfirmationRequest): Promise<void>;
    generateAccessTokenForApp(refreshToken: string, renewRefreshToken?: boolean): Promise<{
        accessToken: string;
        refreshToken?: string;
    }>;
    sendRequest(request: RequestDefinition): Promise<any>;
    close(): void;
    _getPlatformData(): PlatformData;
}
export {};
//# sourceMappingURL=AuthenticationClient.d.ts.map
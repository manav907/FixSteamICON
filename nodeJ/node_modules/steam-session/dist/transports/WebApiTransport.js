"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const http_1 = require("@doctormckay/stdlib/http");
const helpers_1 = require("../helpers");
const debug = (0, debug_1.default)('steam-session:WebApiTransport');
// Assume everything is a POST request unless it's specifically listed as a GET request
const GET_REQUESTS = [
    'IAuthenticationService/GetPasswordRSAPublicKey/v1'
];
const WEBAPI_BASE = 'https://api.steampowered.com';
class WebApiTransport {
    constructor(client) {
        this._client = client;
    }
    async sendRequest(request) {
        let urlPath = `I${request.apiInterface}Service/${request.apiMethod}/v${request.apiVersion}`;
        let url = `${WEBAPI_BASE}/${urlPath}/`;
        let method = GET_REQUESTS.includes(urlPath) ? 'GET' : 'POST';
        let headers = { ...helpers_1.API_HEADERS, ...(request.headers || {}) };
        let queryString = {};
        let form = {};
        if (request.accessToken) {
            queryString.access_token = request.accessToken;
        }
        if (request.requestData && request.requestData.length > 0) {
            (method == 'GET' ? queryString : form).input_protobuf_encoded = request.requestData.toString('base64');
        }
        debug('%s %s %o %o', method, url, queryString, form);
        let requestOptions = {
            method,
            url,
            headers,
            queryString
        };
        if (method == 'POST' && Object.keys(form).length > 0) {
            requestOptions.multipartForm = http_1.HttpClient.simpleObjectToMultipartForm(form);
        }
        let result = await this._client.request(requestOptions);
        if (result.statusCode < 200 || result.statusCode >= 300) {
            let err = new Error(`WebAPI error ${result.statusCode}`);
            err.code = result.statusCode;
            throw err;
        }
        let apiResponse = {};
        let eresultHeader = result.headers['x-eresult'];
        let errorMessageHeader = result.headers['x-error_message'];
        if (typeof eresultHeader == 'string') {
            apiResponse.result = parseInt(eresultHeader);
        }
        if (typeof errorMessageHeader == 'string') {
            apiResponse.errorMessage = errorMessageHeader;
        }
        let resultBody = result.jsonBody || result.textBody || result.rawBody;
        let isMeaningfulJsonBody = result.jsonBody && Object.keys(result.jsonBody).length > 0;
        if (resultBody && (isMeaningfulJsonBody || resultBody.length > 0)) {
            apiResponse.responseData = resultBody;
        }
        return apiResponse;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    close() { }
}
exports.default = WebApiTransport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViQXBpVHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zcG9ydHMvV2ViQXBpVHJhbnNwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQWdDO0FBQ2hDLG1EQUF3RTtBQUt4RSx3Q0FBdUM7QUFFdkMsTUFBTSxLQUFLLEdBQUcsSUFBQSxlQUFXLEVBQUMsK0JBQStCLENBQUMsQ0FBQztBQUUzRCx1RkFBdUY7QUFDdkYsTUFBTSxZQUFZLEdBQUc7SUFDcEIsbURBQW1EO0NBQ25ELENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRyw4QkFBOEIsQ0FBQztBQU9uRCxNQUFxQixlQUFlO0lBR25DLFlBQVksTUFBa0I7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBbUI7UUFDcEMsSUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsWUFBWSxXQUFXLE9BQU8sQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzVGLElBQUksR0FBRyxHQUFHLEdBQUcsV0FBVyxJQUFJLE9BQU8sR0FBRyxDQUFDO1FBQ3ZDLElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzdELElBQUksT0FBTyxHQUFHLEVBQUMsR0FBRyxxQkFBVyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxFQUFDLENBQUM7UUFFM0QsSUFBSSxXQUFXLEdBQU8sRUFBRSxDQUFDO1FBQ3pCLElBQUksSUFBSSxHQUFPLEVBQUUsQ0FBQztRQUVsQixJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDeEIsV0FBVyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFD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
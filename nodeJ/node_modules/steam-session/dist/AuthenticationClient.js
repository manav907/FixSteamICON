"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("@doctormckay/stdlib/http");
const debug_1 = __importDefault(require("debug"));
const events_1 = require("events");
const node_bignumber_1 = require("node-bignumber");
const querystring_1 = require("querystring");
const timers_1 = require("timers");
const EAuthTokenPlatformType_1 = __importDefault(require("./enums-steam/EAuthTokenPlatformType"));
const EOSType_1 = __importDefault(require("./enums-steam/EOSType"));
const EResult_1 = __importDefault(require("./enums-steam/EResult"));
const ESessionPersistence_1 = __importDefault(require("./enums-steam/ESessionPersistence"));
const ETokenRenewalType_1 = __importDefault(require("./enums-steam/ETokenRenewalType"));
const protobufs_1 = require("./protobufs");
const helpers_1 = require("./helpers");
const debug = (0, debug_1.default)('steam-session:AuthenticationClient');
class AuthenticationClient extends events_1.EventEmitter {
    constructor(options) {
        super();
        this._transport = options.transport;
        this._platformType = options.platformType;
        this._webClient = options.webClient;
        this._webUserAgent = options.webUserAgent;
        if (this._platformType == EAuthTokenPlatformType_1.default.WebBrowser) {
            this._webClient.userAgent = options.webUserAgent;
        }
        this._machineId = options.machineId;
    }
    async getRsaKey(accountName) {
        return await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'GetPasswordRSAPublicKey',
            apiVersion: 1,
            data: { account_name: accountName }
        });
    }
    async encryptPassword(accountName, password) {
        let rsaInfo = await this.getRsaKey(accountName);
        let key = new node_bignumber_1.Key();
        key.setPublic(rsaInfo.publickey_mod, rsaInfo.publickey_exp);
        return {
            encryptedPassword: (0, node_bignumber_1.hex2b64)(key.encrypt(password)),
            keyTimestamp: rsaInfo.timestamp
        };
    }
    async startSessionWithCredentials(details) {
        let { websiteId, deviceDetails } = this._getPlatformData();
        let data = {
            account_name: details.accountName,
            encrypted_password: details.encryptedPassword,
            encryption_timestamp: details.keyTimestamp,
            remember_login: details.persistence == ESessionPersistence_1.default.Persistent,
            persistence: details.persistence,
            website_id: websiteId,
            device_details: deviceDetails
        };
        if (details.platformType == EAuthTokenPlatformType_1.default.SteamClient) {
            // For SteamClient logins, we also need a machine id
            if (this._machineId && Buffer.isBuffer(this._machineId)) {
                data.device_details.machine_id = this._machineId;
            }
            else if (this._machineId === true) {
                data.device_details.machine_id = (0, helpers_1.createMachineId)(details.accountName);
            }
        }
        if (details.steamGuardMachineToken) {
            if (Buffer.isBuffer(details.steamGuardMachineToken)) {
                data.guard_data = details.steamGuardMachineToken;
            }
            else if (typeof details.steamGuardMachineToken == 'string' && (0, helpers_1.isJwtValidForAudience)(details.steamGuardMachineToken, 'machine')) {
                data.guard_data = Buffer.from(details.steamGuardMachineToken, 'utf8');
            }
        }
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'BeginAuthSessionViaCredentials',
            apiVersion: 1,
            data
        });
        return {
            clientId: result.client_id,
            requestId: result.request_id,
            pollInterval: result.interval,
            allowedConfirmations: result.allowed_confirmations.map(c => ({ type: c.confirmation_type, message: c.associated_message })),
            steamId: result.steamid,
            weakToken: result.weak_token
        };
    }
    async startSessionWithQR() {
        let { deviceDetails } = this._getPlatformData();
        let data = {
            device_details: deviceDetails
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'BeginAuthSessionViaQR',
            apiVersion: 1,
            data
        });
        return {
            clientId: result.client_id,
            requestId: result.request_id,
            pollInterval: result.interval,
            allowedConfirmations: result.allowed_confirmations.map(c => ({ type: c.confirmation_type, message: c.associated_message })),
            challengeUrl: result.challenge_url,
            version: result.version
        };
    }
    async submitSteamGuardCode(details) {
        let data = {
            client_id: details.clientId,
            steamid: details.steamId,
            code: details.authCode,
            code_type: details.authCodeType
        };
        await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'UpdateAuthSessionWithSteamGuardCode',
            apiVersion: 1,
            data
        });
    }
    async checkMachineAuthOrSendCodeEmail(details) {
        let headers = Object.assign({ 'content-type': 'multipart/form-data' }, helpers_1.API_HEADERS);
        if (details.machineAuthToken) {
            headers.cookie = `steamMachineAuth${details.steamId}=${details.machineAuthToken}`;
        }
        let body = { clientid: details.clientId, steamid: details.steamId };
        debug('POST https://login.steampowered.com/jwt/checkdevice %o', body);
        let result = await this._webClient.request({
            method: 'POST',
            url: 'https://login.steampowered.com/jwt/checkdevice',
            multipartForm: http_1.HttpClient.simpleObjectToMultipartForm(body),
            headers: helpers_1.API_HEADERS
        });
        return result.jsonBody;
    }
    async pollLoginStatus(details) {
        let data = {
            client_id: details.clientId,
            request_id: details.requestId
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'PollAuthSessionStatus',
            apiVersion: 1,
            data
        });
        return {
            newClientId: result.new_client_id,
            newChallengeUrl: result.new_challenge_url,
            refreshToken: result.refresh_token,
            accessToken: result.access_token,
            hadRemoteInteraction: result.had_remote_interaction,
            accountName: result.account_name,
            newSteamGuardMachineAuth: result.new_guard_data
        };
    }
    async getAuthSessionInfo(accessToken, details) {
        let data = {
            client_id: details.clientId
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'GetAuthSessionInfo',
            apiVersion: 1,
            data,
            accessToken
        });
        return {
            ip: result.ip,
            geoloc: result.geoloc,
            city: result.city,
            state: result.state,
            platformType: result.platform_type,
            deviceFriendlyName: result.device_friendly_name,
            version: result.version,
            loginHistory: result.login_history,
            locationMismatch: result.requestor_location_mismatch,
            highUsageLogin: result.high_usage_login,
            requestedPersistence: result.requested_persistence
        };
    }
    async submitMobileConfirmation(accessToken, details) {
        let data = {
            version: details.version,
            client_id: details.clientId,
            steamid: details.steamId,
            signature: details.signature,
            confirm: details.confirm,
            persistence: details.persistence
        };
        await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'UpdateAuthSessionWithMobileConfirmation',
            apiVersion: 1,
            data,
            accessToken
        });
    }
    async generateAccessTokenForApp(refreshToken, renewRefreshToken = false) {
        let data = {
            refresh_token: refreshToken,
            steamid: (0, helpers_1.decodeJwt)(refreshToken).sub,
            renewal_type: renewRefreshToken ? ETokenRenewalType_1.default.Allow : ETokenRenewalType_1.default.None
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'GenerateAccessTokenForApp',
            apiVersion: 1,
            data
        });
        // We're done with the transport
        this.close();
        return {
            accessToken: result.access_token,
            refreshToken: result.refresh_token || null
        };
    }
    async sendRequest(request) {
        // If a transport close is pending, cancel it
        (0, timers_1.clearTimeout)(this._transportCloseTimeout);
        // Right now we really only support IAuthenticationService
        let { request: requestProto, response: responseProto } = (0, protobufs_1.getProtoForMethod)(request.apiInterface, request.apiMethod);
        if (!requestProto || !responseProto) {
            throw new Error(`Unknown API method ${request.apiInterface}/${request.apiMethod}`);
        }
        let { headers } = this._getPlatformData();
        this.emit('debug', request.apiMethod, request.data, headers);
        let result = await this._transport.sendRequest({
            apiInterface: request.apiInterface,
            apiMethod: request.apiMethod,
            apiVersion: request.apiVersion,
            requestData: requestProto.encode(request.data).finish(),
            accessToken: request.accessToken,
            headers
        });
        if (result.result != EResult_1.default.OK) {
            throw (0, helpers_1.eresultError)(result.result, result.errorMessage);
        }
        // We need to decode the response data, if there was any
        let responseData = result.responseData && result.responseData.length > 0 ? result.responseData : Buffer.alloc(0);
        let decodedData = responseProto.decode(responseData);
        return responseProto.toObject(decodedData, { longs: String });
    }
    close() {
        // We might possibly want to immediately use this transport again after we think we should close it.
        // For example, to refresh a token after we log on. So instead of closing immediately, delay by 2 seconds
        // before closing to give us time for this possibility.
        (0, timers_1.clearTimeout)(this._transportCloseTimeout);
        this._transportCloseTimeout = setTimeout(() => {
            this._transport.close();
        }, 2000);
    }
    _getPlatformData() {
        switch (this._platformType) {
            case EAuthTokenPlatformType_1.default.SteamClient:
                let refererQuery = {
                    IN_CLIENT: 'true',
                    WEBSITE_ID: 'Client',
                    LOCAL_HOSTNAME: (0, helpers_1.getSpoofedHostname)(),
                    WEBAPI_BASE_URL: 'https://api.steampowered.com/',
                    STORE_BASE_URL: 'https://store.steampowered.com/',
                    USE_POPUPS: 'true',
                    DEV_MODE: 'false',
                    LANGUAGE: 'english',
                    PLATFORM: 'windows',
                    COUNTRY: 'US',
                    LAUNCHER_TYPE: '0',
                    IN_LOGIN: 'true'
                };
                return {
                    websiteId: 'Unknown',
                    // Headers are actually not used since this is sent over a CM connection
                    headers: {
                        'user-agent': 'Mozilla/5.0 (Windows; U; Windows NT 10.0; en-US; Valve Steam Client/default/1665786434; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
                        origin: 'https://steamloopback.host',
                        referer: 'https://steamloopback.host/index.html?' + (0, querystring_1.stringify)(refererQuery)
                    },
                    // device_details is also not sent for SteamClient logins, matching the behavior of the official client
                    // in the past, the client did send these details, but not anymore
                    deviceDetails: {
                        device_friendly_name: refererQuery.LOCAL_HOSTNAME,
                        platform_type: EAuthTokenPlatformType_1.default.SteamClient,
                        os_type: EOSType_1.default.Win11,
                        // EGamingDeviceType full definition is unknown, but 1 appears to be a desktop PC
                        gaming_device_type: 1
                    }
                };
            case EAuthTokenPlatformType_1.default.WebBrowser:
                return {
                    websiteId: 'Community',
                    headers: {
                        'user-agent': this._webUserAgent,
                        origin: 'https://steamcommunity.com',
                        referer: 'https://steamcommunity.com'
                    },
                    // device details are sent for web logins
                    deviceDetails: {
                        device_friendly_name: this._webUserAgent,
                        platform_type: EAuthTokenPlatformType_1.default.WebBrowser
                    }
                };
            case EAuthTokenPlatformType_1.default.MobileApp:
                return {
                    websiteId: 'Mobile',
                    headers: {
                        'user-agent': 'okhttp/3.12.12',
                        cookie: 'mobileClient=android; mobileClientVersion=777777 3.0.0'
                    },
                    deviceDetails: {
                        device_friendly_name: 'Galaxy S22',
                        platform_type: EAuthTokenPlatformType_1.default.MobileApp,
                        os_type: EOSType_1.default.AndroidUnknown,
                        gaming_device_type: 528 // dunno
                    }
                };
            default:
                let err = new Error('Unsupported platform type');
                err.platformType = this._platformType;
                throw err;
        }
    }
}
exports.default = AuthenticationClient;
//# sourceMappingURL=data:application/json;base64,